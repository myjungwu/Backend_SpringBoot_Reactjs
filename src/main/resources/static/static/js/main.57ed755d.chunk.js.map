{"version":3,"sources":["services/EmployeeService.js","components/ListEmployeeComponent.jsx","components/HeaderComponent.js","components/FooterComponent.jsx","components/CreateEmployeeComponent.jsx","components/ViewEmployeeComponent.jsx","components/UpdateEmployeeComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["EMPLOYEE_API_BASE_URL","process","axios","get","employee","post","employeeId","put","delete","ListEmployeeComponent","props","state","employees","addEmployee","bind","editEmployee","deleteEmployee","id","EmployeeService","then","res","setState","filter","this","history","push","getEmployees","data","className","onClick","map","key","firstName","lastName","emailId","style","marginLeft","viewEmployee","Component","HeaderComponent","href","FooterComponent","CreateEmployeeComponent","saveOrUpdateEmployee","e","preventDefault","console","log","JSON","stringify","createEmployee","updateEmployee","changeFirstNameHandler","event","target","value","changeLastNameHandler","changeEmailHandler","match","params","getEmployeeById","getTitle","placeholder","name","onChange","cancel","ViewEmployeeComponent","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57ed755d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst EMPLOYEE_API_BASE_URL = process.env.REACT_APP_APIURL;\r\n//\"http://localhost:8080/api/v1/employees\";\r\n\r\nclass EmployeeService {\r\n\r\n    getEmployees(){\r\n        return axios.get(EMPLOYEE_API_BASE_URL);\r\n    }\r\n\r\n    createEmployee(employee){\r\n        return axios.post(EMPLOYEE_API_BASE_URL, employee);\r\n    }\r\n\r\n    getEmployeeById(employeeId){\r\n        return axios.get(EMPLOYEE_API_BASE_URL + '/' + employeeId);\r\n    }\r\n\r\n    updateEmployee(employee, employeeId){\r\n        return axios.put(EMPLOYEE_API_BASE_URL + '/' + employeeId, employee);\r\n    }\r\n\r\n    deleteEmployee(employeeId){\r\n        return axios.delete(EMPLOYEE_API_BASE_URL + '/' + employeeId);\r\n    }\r\n}\r\n\r\nexport default new EmployeeService()","import React, { Component } from 'react'\r\nimport EmployeeService from '../services/EmployeeService'\r\n\r\nclass ListEmployeeComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                employees: []\r\n        }\r\n        this.addEmployee = this.addEmployee.bind(this);\r\n        this.editEmployee = this.editEmployee.bind(this);\r\n        this.deleteEmployee = this.deleteEmployee.bind(this);\r\n    }\r\n\r\n    deleteEmployee(id){\r\n        EmployeeService.deleteEmployee(id).then( res => {\r\n            this.setState({employees: this.state.employees.filter(employee => employee.id !== id)});\r\n        });\r\n    }\r\n    viewEmployee(id){\r\n        this.props.history.push(`/view-employee/${id}`);\r\n    }\r\n    editEmployee(id){\r\n        this.props.history.push(`/add-employee/${id}`);\r\n    }\r\n\r\n    componentDidMount(){\r\n        EmployeeService.getEmployees().then((res) => {\r\n            this.setState({ employees: res.data});\r\n        });\r\n    }\r\n\r\n    addEmployee(){\r\n        this.props.history.push('/add-employee/_add');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                 <h2 className=\"text-center\">Employees List</h2>\r\n                 <div className = \"row\">\r\n                    <button className=\"btn btn-primary\" onClick={this.addEmployee}> Add Employee</button>\r\n                 </div>\r\n                 <br></br>\r\n                 <div className = \"row\">\r\n                        <table className = \"table table-striped table-bordered\">\r\n\r\n                            <thead>\r\n                                <tr>\r\n                                    <th> Employee First Name</th>\r\n                                    <th> Employee Last Name</th>\r\n                                    <th> Employee Email Id</th>\r\n                                    <th> Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.employees.map(\r\n                                        employee => \r\n                                        <tr key = {employee.id}>\r\n                                             <td> { employee.firstName} </td>   \r\n                                             <td> {employee.lastName}</td>\r\n                                             <td> {employee.emailId}</td>\r\n                                             <td>\r\n                                                 <button onClick={ () => this.editEmployee(employee.id)} className=\"btn btn-info\">Update </button>\r\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.deleteEmployee(employee.id)} className=\"btn btn-danger\">Delete </button>\r\n                                                 <button style={{marginLeft: \"10px\"}} onClick={ () => this.viewEmployee(employee.id)} className=\"btn btn-info\">View </button>\r\n                                             </td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n\r\n                 </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListEmployeeComponent\r\n","import React, { Component } from 'react'\r\n\r\nclass HeaderComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                 \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header>\r\n                    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div><a href=\"https://javaguides.net\" className=\"navbar-brand\">Employee Mgt App({process.env.REACT_APP_ENV})</a></div>\r\n                    </nav>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderComponent\r\n","import React, { Component } from 'react'\r\n\r\nclass FooterComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n                 \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <footer className = \"footer\">\r\n                    <span className=\"text-muted\">All Rights Reserved 2020 @JavaGuides</span>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FooterComponent\r\n","import React, { Component } from 'react'\r\nimport EmployeeService from '../services/EmployeeService';\r\n\r\nclass CreateEmployeeComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            // step 2\r\n            id: this.props.match.params.id,\r\n            firstName: '',\r\n            lastName: '',\r\n            emailId: ''\r\n        }\r\n        this.changeFirstNameHandler = this.changeFirstNameHandler.bind(this);\r\n        this.changeLastNameHandler = this.changeLastNameHandler.bind(this);\r\n        this.saveOrUpdateEmployee = this.saveOrUpdateEmployee.bind(this);\r\n    }\r\n\r\n    // step 3\r\n    componentDidMount(){\r\n\r\n        // step 4\r\n        if(this.state.id === '_add'){\r\n            return\r\n        }else{\r\n            EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\r\n                let employee = res.data;\r\n                this.setState({firstName: employee.firstName,\r\n                    lastName: employee.lastName,\r\n                    emailId : employee.emailId\r\n                });\r\n            });\r\n        }        \r\n    }\r\n    saveOrUpdateEmployee = (e) => {\r\n        e.preventDefault();\r\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\r\n        console.log('employee => ' + JSON.stringify(employee));\r\n\r\n        // step 5\r\n        if(this.state.id === '_add'){\r\n            EmployeeService.createEmployee(employee).then(res =>{\r\n                this.props.history.push('/employees');\r\n            });\r\n        }else{\r\n            EmployeeService.updateEmployee(employee, this.state.id).then( res => {\r\n                this.props.history.push('/employees');\r\n            });\r\n        }\r\n    }\r\n    \r\n    changeFirstNameHandler= (event) => {\r\n        this.setState({firstName: event.target.value});\r\n    }\r\n\r\n    changeLastNameHandler= (event) => {\r\n        this.setState({lastName: event.target.value});\r\n    }\r\n\r\n    changeEmailHandler= (event) => {\r\n        this.setState({emailId: event.target.value});\r\n    }\r\n\r\n    cancel(){\r\n        this.props.history.push('/employees');\r\n    }\r\n\r\n    getTitle(){\r\n        if(this.state.id === '_add'){\r\n            return <h3 className=\"text-center\">Add Employee</h3>\r\n        }else{\r\n            return <h3 className=\"text-center\">Update Employee</h3>\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br></br>\r\n                   <div className = \"container\">\r\n                        <div className = \"row\">\r\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\r\n                                {\r\n                                    this.getTitle()\r\n                                }\r\n                                <div className = \"card-body\">\r\n                                    <form>\r\n                                        <div className = \"form-group\">\r\n                                            <label> First Name: </label>\r\n                                            <input placeholder=\"First Name\" name=\"firstName\" className=\"form-control\" \r\n                                                value={this.state.firstName} onChange={this.changeFirstNameHandler}/>\r\n                                        </div>\r\n                                        <div className = \"form-group\">\r\n                                            <label> Last Name: </label>\r\n                                            <input placeholder=\"Last Name\" name=\"lastName\" className=\"form-control\" \r\n                                                value={this.state.lastName} onChange={this.changeLastNameHandler}/>\r\n                                        </div>\r\n                                        <div className = \"form-group\">\r\n                                            <label> Email Id: </label>\r\n                                            <input placeholder=\"Email Address\" name=\"emailId\" className=\"form-control\" \r\n                                                value={this.state.emailId} onChange={this.changeEmailHandler}/>\r\n                                        </div>\r\n\r\n                                        <button className=\"btn btn-success\" onClick={this.saveOrUpdateEmployee}>Save</button>\r\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                   </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateEmployeeComponent\r\n","import React, { Component } from 'react'\r\nimport EmployeeService from '../services/EmployeeService'\r\n\r\nclass ViewEmployeeComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            employee: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        EmployeeService.getEmployeeById(this.state.id).then( res => {\r\n            this.setState({employee: res.data});\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br></br>\r\n                <div className = \"card col-md-6 offset-md-3\">\r\n                    <h3 className = \"text-center\"> View Employee Details</h3>\r\n                    <div className = \"card-body\">\r\n                        <div className = \"row\">\r\n                            <label> Employee First Name: </label>\r\n                            <div> { this.state.employee.firstName }</div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                            <label> Employee Last Name: </label>\r\n                            <div> { this.state.employee.lastName }</div>\r\n                        </div>\r\n                        <div className = \"row\">\r\n                            <label> Employee Email ID: </label>\r\n                            <div> { this.state.employee.emailId }</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ViewEmployeeComponent\r\n","import React, { Component } from 'react'\r\nimport EmployeeService from '../services/EmployeeService';\r\n\r\nclass UpdateEmployeeComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            firstName: '',\r\n            lastName: '',\r\n            emailId: ''\r\n        }\r\n        this.changeFirstNameHandler = this.changeFirstNameHandler.bind(this);\r\n        this.changeLastNameHandler = this.changeLastNameHandler.bind(this);\r\n        this.updateEmployee = this.updateEmployee.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        EmployeeService.getEmployeeById(this.state.id).then( (res) =>{\r\n            let employee = res.data;\r\n            this.setState({firstName: employee.firstName,\r\n                lastName: employee.lastName,\r\n                emailId : employee.emailId\r\n            });\r\n        });\r\n    }\r\n\r\n    updateEmployee = (e) => {\r\n        e.preventDefault();\r\n        let employee = {firstName: this.state.firstName, lastName: this.state.lastName, emailId: this.state.emailId};\r\n        console.log('employee => ' + JSON.stringify(employee));\r\n        console.log('id => ' + JSON.stringify(this.state.id));\r\n        EmployeeService.updateEmployee(employee, this.state.id).then( res => {\r\n            this.props.history.push('/employees');\r\n        });\r\n    }\r\n    \r\n    changeFirstNameHandler= (event) => {\r\n        this.setState({firstName: event.target.value});\r\n    }\r\n\r\n    changeLastNameHandler= (event) => {\r\n        this.setState({lastName: event.target.value});\r\n    }\r\n\r\n    changeEmailHandler= (event) => {\r\n        this.setState({emailId: event.target.value});\r\n    }\r\n\r\n    cancel(){\r\n        this.props.history.push('/employees');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <br></br>\r\n                   <div className = \"container\">\r\n                        <div className = \"row\">\r\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\r\n                                <h3 className=\"text-center\">Update Employee</h3>\r\n                                <div className = \"card-body\">\r\n                                    <form>\r\n                                        <div className = \"form-group\">\r\n                                            <label> First Name: </label>\r\n                                            <input placeholder=\"First Name\" name=\"firstName\" className=\"form-control\" \r\n                                                value={this.state.firstName} onChange={this.changeFirstNameHandler}/>\r\n                                        </div>\r\n                                        <div className = \"form-group\">\r\n                                            <label> Last Name: </label>\r\n                                            <input placeholder=\"Last Name\" name=\"lastName\" className=\"form-control\" \r\n                                                value={this.state.lastName} onChange={this.changeLastNameHandler}/>\r\n                                        </div>\r\n                                        <div className = \"form-group\">\r\n                                            <label> Email Id: </label>\r\n                                            <input placeholder=\"Email Address\" name=\"emailId\" className=\"form-control\" \r\n                                                value={this.state.emailId} onChange={this.changeEmailHandler}/>\r\n                                        </div>\r\n\r\n                                        <button className=\"btn btn-success\" onClick={this.updateEmployee}>Save</button>\r\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                   </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UpdateEmployeeComponent\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport ListEmployeeComponent from './components/ListEmployeeComponent';\r\nimport HeaderComponent from './components/HeaderComponent';\r\nimport FooterComponent from './components/FooterComponent';\r\nimport CreateEmployeeComponent from './components/CreateEmployeeComponent';\r\nimport UpdateEmployeeComponent from './components/UpdateEmployeeComponent';\r\nimport ViewEmployeeComponent from './components/ViewEmployeeComponent';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <Router>\r\n              <HeaderComponent />\r\n                <div className=\"container\">\r\n                    <Switch> \r\n                          <Route path = \"/\" exact component = {ListEmployeeComponent}></Route>\r\n                          <Route path = \"/employees\" component = {ListEmployeeComponent}></Route>\r\n                          <Route path = \"/add-employee/:id\" component = {CreateEmployeeComponent}></Route>\r\n                          <Route path = \"/view-employee/:id\" component = {ViewEmployeeComponent}></Route>\r\n                          {/* <Route path = \"/update-employee/:id\" component = {UpdateEmployeeComponent}></Route> */}\r\n                    </Switch>\r\n                </div>\r\n              <FooterComponent />\r\n        </Router>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}